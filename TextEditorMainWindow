from PyQt6.QtCore import pyqtSlot, QFile, QIODevice, QTextStream, pyqtSignal
from PyQt6.QtGui import QFont
from PyQt6.QtWidgets import QMainWindow, QMenu, QMenuBar, QFileDialog, QFontDialog, QStatusBar, QMessageBox

from CentralWidget import CentralWidget  # Import des zentralen Widgets

class MainWindow(QMainWindow):
    """
    Dieses Hauptfenster bietet grundlegende Funktionen eines Texteditors:
    - Öffnen und Speichern von Dateien.
    - Schriftart ändern.
    - Option für Dateioperationen wie Kopieren und Verschieben.
    """

    # Signale zur Kommunikation mit dem CentralWidget
    write_text = pyqtSignal(str)  # Signal zum Senden von Text an das CentralWidget
    write_font = pyqtSignal(QFont)  # Signal zum Senden einer Schriftart an das CentralWidget

    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)

        # Standard-Schriftart
        self.__font = QFont()

        # Dateifilter und Verzeichnis
        self.__initial_filter = "Default files (*.txt)"  # Standardfilter für Textdateien
        self.__filter = self.__initial_filter + ";;All files (*)"  # Zusätzlicher Filter für alle Dateien
        self.__directory = ""  # Initiales Verzeichnis

        # Zentrales Widget des Fensters
        self.__central_widget = CentralWidget(self)
        self.write_text.connect(self.__central_widget.set_text)  # Verknüpfe Textsignal
        self.write_font.connect(self.__central_widget.set_font)  # Verknüpfe Schriftartsignal

        # Fenster-Titel
        self.setWindowTitle("Mein Texteditor")

        # Statusleiste
        self.setStatusBar(QStatusBar(self))

        # Menüleiste erstellen
        menu_bar = QMenuBar(self)

        # "Files"-Menü erstellen
        files = QMenu("Files", menu_bar)

        # Aktionen im "Files"-Menü
        action_file_open = files.addAction("Open ...")
        action_file_open.triggered.connect(self.file_open)  # Verknüpfe mit file_open

        action_file_save = files.addAction("Save ...")
        action_file_save.triggered.connect(self.file_save)  # Verknüpfe mit file_save

        action_file_copy = files.addAction("Copy ...")
        action_file_copy.triggered.connect(self.file_copy)  # Verknüpfe mit file_copy (noch nicht implementiert)

        action_file_move = files.addAction("Move ...")
        action_file_move.triggered.connect(self.file_move)  # Verknüpfe mit file_move (noch nicht implementiert)

        # Füge das "Files"-Menü zur Menüleiste hinzu
        menu_bar.addMenu(files)

        # "Font"-Menü erstellen
        font = QMenu("Font", menu_bar)

        # Aktion im "Font"-Menü
        action_font = font.addAction("Font")
        action_font.triggered.connect(self.font)  # Verknüpfe mit font

        # Füge das "Font"-Menü zur Menüleiste hinzu
        menu_bar.addMenu(font)

        # Menüleiste setzen
        self.setMenuBar(menu_bar)

        # Setze das zentrale Widget
        self.setCentralWidget(self.__central_widget)

    @pyqtSlot()
    def file_open(self):
        """
        Öffnet eine Datei und liest deren Inhalt.
        Der Inhalt wird in das zentrale Textfeld geladen.
        """
        (path, self.__initial_filter) = QFileDialog.getOpenFileName(
            self, "Open File", self.__directory, self.__filter, self.__initial_filter
        )

        if path:  # Wenn ein Pfad ausgewählt wurde
            self.__directory = path[:path.rfind("/")]  # Aktualisiere das Verzeichnis
            self.statusBar().showMessage("File opened: " + path[path.rfind("/") + 1:])  # Zeige die Datei im Status

            file = QFile(path)

            if not file.open(QIODevice.OpenModeFlag.ReadOnly):  # Datei im Lesemodus öffnen
                QMessageBox.information(self, "Unable to open file", file.errorString())  # Fehler anzeigen
                return

            stream = QTextStream(file)
            text_in_file = stream.readAll()  # Lese den gesamten Text

            self.write_text.emit(text_in_file)  # Sende den Text an das zentrale Widget
            file.close()

    @pyqtSlot()
    def file_save(self):
        """
        Speichert den Inhalt des Textfelds in einer Datei.
        """
        (path, self.__initial_filter) = QFileDialog.getSaveFileName(
            self, "Save File", self.__directory, self.__filter, self.__initial_filter
        )

        if path:  # Wenn ein Pfad ausgewählt wurde
            self.__directory = path[:path.rfind("/")]  # Aktualisiere das Verzeichnis
            self.statusBar().showMessage("File saved: " + path[path.rfind("/") + 1:])  # Zeige die Datei im Status

            file = QFile(path)

            if not file.open(QIODevice.OpenModeFlag.WriteOnly):  # Datei im Schreibmodus öffnen
                QMessageBox.information(self, "Unable to save file", file.errorString())  # Fehler anzeigen
                return

            stream = QTextStream(file)
            stream << self.__central_widget.get_text()  # Schreibe den Text in die Datei

            stream.flush()  # Stelle sicher, dass alle Daten geschrieben werden
            file.close()

    @pyqtSlot()
    def file_copy(self):
        """
        Platzhalter für die Kopierfunktion (noch nicht implementiert).
        """
        pass

    @pyqtSlot()
    def file_move(self):
        """
        Platzhalter für die Verschiebefunktion (noch nicht implementiert).
        """
        pass

    @pyqtSlot()
    def font(self):
        """
        Öffnet einen Dialog zur Auswahl der Schriftart.
        Die neue Schriftart wird auf das Textfeld angewendet.
        """
        [changed_font, changed] = QFontDialog.getFont(self.__font, self, "Select your font")

        if changed:  # Wenn eine neue Schriftart ausgewählt wurde
            self.__font = changed_font  # Aktualisiere die Schriftart
            self.write_font.emit(self.__font)  # Sende die neue Schriftart an das zentrale Widget
